forms.html

{% with messages = get_flashed_messages() %}
{% if messages %}
  {% for message in messages %}
      <div class="alert alert-success">
      {{ message }}
    </div>
  {% endfor %}
{% endif %}
{% endwith %}



#add login manager support
    #initialize the login manager
    login_manager = LoginManager()
    
    #set the name of the login function that lets user login
    # in our case it is auth.login (blueprintname.viewfunction name)
    login_manager.login_view='auth.login'
    login_manager.init_app(app)

    #create a user loader function takes userid and returns User
    from .models import User  # importing here to avoid circular references
    @login_manager.user_loader
    def load_user(user_id):
        return User.query.get(int(user_id))



############view functions auth.py
@bp.route('/register', methods = ['GET', 'POST'])  
def register():  
  #create the form
    form = RegisterForm()
    #this line is called when the form - POST
    if form.validate_on_submit():
      print('Register form submitted')
       
      #get username, password and email from the form
      uname =form.username.data
      pwd = form.password.data
      email=form.email.data
      utype =form.usertype.data
      
      pwd_hash = generate_password_hash(pwd)
      #create a new user model object
      new_user = User(name=uname, password_hash=pwd_hash, emailid=email, usertype=utype)
      db.session.add(new_user)
      db.session.commit()
      flash("Registered user successfully")
      return redirect(url_for('auth.register'))
       
    return render_template('forms.html', form=form, heading='Register')


@bp.route('/login', methods = ['GET', 'POST'])
def login():
  form = LoginForm()
  error=None
  if(form.validate_on_submit()):
    user_name = form.username.data
    password = form.password.data
    u1 = User.query.filter_by(name=user_name).first()
    
        #if there is no user with that name
    if u1 is None:
      error='Incorrect user name'
    #check the password - notice password hash function
    elif not check_password_hash(u1.password_hash, password): # takes the hash and password
      error='Incorrect password'
    if error is None:
    #all good, set the login_user
      #login_user(u1)
      return redirect(url_for('main.index'))
    else:
      print(error)
      flash(error)
    #it comes here when it is a get method
  return render_template('forms.html', form=form, heading='Login')


@bp.route('/logout')
def logout():
  logout_user()
  return 'Successfully logged out user'



<ul class="nav navbar-nav ml-auto">
                    {% if current_user.is_authenticated %} 
                    <a class="nav-item nav-link disabled text-muted text-light" href="#"><span>Welcome, {{ current_user.name }}</span></a> 
                    <a class="nav-item nav-link text-light" href="{{ url_for('auth.logout') }}">Log Out</a> 
                    {% else %} 
                    <a class="nav-item nav-link text-light" href="{{ url_for('auth.register') }}">Register</a> 
                    <a class="nav-item nav-link text-light" href="{{ url_for('auth.login') }}">Log In</a> 
                  {% endif %} 
                
</ul>
